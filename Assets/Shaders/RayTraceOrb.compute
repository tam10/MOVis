#pragma kernel CSMain

// Credit for sphere ray tracing goes to David Kuri http://blog.three-eyed-games.com/2018/05/03/gpu-ray-tracing-in-unity-part-1/
// Inspiration for volumetric rendering goes to Sebastian Lague https://github.com/SebLague/Clouds

RWTexture2D<float4> Result;

Texture3D<float2> _OrbData;
SamplerState sampler_OrbData;
float3 _OrbBoundsMin;
float3 _OrbBoundsMax;
float3 _InvOrbBoundsSize;
float4 _PositivePhaseColour;
float4 _NegativePhaseColour;
float4 _HBondColour;
float _OrbitalPower;
float _IsoLevel;

bool _ShowOrb;
bool _ShowIso;
bool _ShowDensity;
bool _ShowGround;
bool _ShowHBonds;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

float2 _PixelOffset;
float4 _DirectionalLight;
float4 _DirectionalLightRandom;
float3 _GroundAlbedo;
float3 _GroundSpecular;
float _BackgroundBrightness;

uint numSpheres;
uint numBonds;
uint numHBonds;

static const float PI = 3.14159265f;

struct Sphere {
    float3 position;
    float radius;
    float3 specular;
    float mass;
};

StructuredBuffer<Sphere> _Spheres;

struct Cylinder {
    float3 position;
    float radius;
    float3 direction;
    float length;
    float4 specular;
};

StructuredBuffer<Cylinder> _Bonds;

struct Ray {
    float4 energy;
    float3 origin;
    float dstToBox;
    float3 direction;
    float dstInsideBox;
};

struct RayHit {
    float3 position;
    float distance;
    float3 normal;
    float3 albedo;
    float3 specular;
};

Ray CreateRay(float3 origin, float3 direction) {
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float4(1.0f, 1.0f, 1.0f, 1.0f);
    ray.dstToBox = 0;
    ray.dstInsideBox = 0;
    return ray;
}

Ray CreateCameraRay(float2 uv) {
    // Transform the camera origin to world space
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    
    // Invert the perspective projection of the view-space position
    float3 direction = mul(_CameraInverseProjection, float4(uv.x, uv.y, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);
    return CreateRay(origin, direction);
}

RayHit CreateRayHit() {
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    hit.albedo = float3(0.0f, 0.0f, 0.0f);
    hit.specular = float3(0.0f, 0.0f, 0.0f);
    return hit;
}

void IntersectGroundPlane(Ray ray, inout RayHit bestHit) {
    // Calculate distance along the ray where the ground plane is intersected
    float t = -ray.origin.y / ray.direction.y;
    if (t > 0 && t < bestHit.distance) {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = float3(0.0f, 1.0f, 0.0f);
        //float s = 2.0f / (1 + exp(0.01f * t));
        float s = abs(ray.direction.y);
        bestHit.albedo = _GroundAlbedo * s;
        bestHit.specular = _GroundSpecular * s;
    }
}

void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere) {
    // Calculate distance along the ray where the sphere is intersected
    float3 d = ray.origin - sphere.position;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;

    if (p2sqr >= 0) {
        
        float p2 = sqrt(p2sqr);
        float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
        if (t > 0 && t < bestHit.distance) {
            bestHit.distance = t;
            bestHit.position = ray.origin + t * ray.direction;
            bestHit.normal = (bestHit.position - sphere.position) / sphere.radius;
            bestHit.specular = sphere.specular;
        }
    }
}

void IntersectCylinder(Ray ray, inout RayHit bestHit, Cylinder cylinder) {
    
    float3 v = ray.direction;
    float3 va = cylinder.direction;
    float3 dp = ray.origin - cylinder.position;
    float r2 = cylinder.radius * cylinder.radius;

    // Quadratic equation for infinite cylinder
    float3 rtA = v - dot(v, va) * va;
    float3 rtC = dp - dot(dp, va) * va;
    float A = dot(rtA, rtA);
    float B = 2 * dot(rtA, rtC);
    float C = dot(rtC, rtC) - r2;

    float det = (B*B - 4*A*C);

    [branch]
    if (det > 0) {
        // Inside of infinite cylinder

        // Ensure we select the best t before computing
        float sqrtDet = (A*2) < 0 ? sqrt(det) : -sqrt(det);

        // // Distance to cylinder
        float t = (- B + sqrtDet) / (A*2);

        // Point on cylinder
        float3 q = ray.origin + t * ray.direction;

        // Distance from centre of cylinder and intersection projected onto cylinder direction
        float qva = dot(q - cylinder.position, va);

        // Inside finite cylinder
        // This distance must be less than half the cylinder length
        // The distance to the cylinder must be greater than 0 AND less than the current best distance
        if (abs(qva) * 2 < cylinder.length * sign(t) * step(t, bestHit.distance)) {
            bestHit.distance = t;
            bestHit.position = q;
            // Normal is vector from va to q, normalised
            bestHit.normal = (q - cylinder.position - va * qva) / cylinder.radius;
            bestHit.specular = cylinder.specular.xyz;
        }
    }
}

float SampleHBond(Ray ray, RayHit bestHit, Cylinder hBond) {

    float intersectAmount = 0;
    
    float3 v = ray.direction;
    float3 va = hBond.direction;
    float3 dp = ray.origin - hBond.position;
    float r2 = hBond.radius * hBond.radius;

    // Quadratic equation for infinite cylinder
    float3 rtA = v - dot(v, va) * va;
    float3 rtC = dp - dot(dp, va) * va;
    float A = dot(rtA, rtA);
    float B = 2 * dot(rtA, rtC);
    float C = dot(rtC, rtC) - r2;

    float det = (B*B - 4*A*C);

    if (det > 0) {
        // Inside of infinite cylinder

        // Ensure we select the best t before computing
        float sqrtDet = (A*2) < 0 ? sqrt(det) : -sqrt(det);

        // // Distance to cylinder
        float t = (- B + sqrtDet) / (A*2);

        // Point on cylinder
        float3 q = ray.origin + t * ray.direction;

        // Distance from centre of cylinder and intersection projected onto va
        float qva = dot(q - hBond.position, va);

        // Inside finite cylinder
        // This distance must be less than half the cylinder length
        // The distance to the cylinder must be greater than 0 AND less than the current best distance
        if (abs(qva) * 2 < hBond.length * sign(t) * step(t, bestHit.distance)) {
            intersectAmount = abs(sqrtDet / A); 
        }
    }

    return intersectAmount;

}

// Sets ray.dstToBox, ray.dstInsideBox. If ray misses box, dstInsideBox will be zero
void GetRayBoxDst(float3 boundsMin, float3 boundsMax, inout Ray ray) {
    // Adapted from: http://jcgt.org/published/0007/03/04/
    float3 invRaydir =  1/ray.direction;
    float3 t0 = (boundsMin - ray.origin) * invRaydir;
    float3 t1 = (boundsMax - ray.origin) * invRaydir;
    float3 tmin = min(t0, t1);
    float3 tmax = max(t0, t1);
    
    float dstA = max(max(tmin.x, tmin.y), tmin.z);
    float dstB = min(tmax.x, min(tmax.y, tmax.z));

    // CASE 1: ray intersects box from outside (0 <= dstA <= dstB)
    // dstA is dst to nearest intersection, dstB dst to far intersection

    // CASE 2: ray intersects box from inside (dstA < 0 < dstB)
    // dstA is the dst to intersection behind the ray, dstB is dst to forward intersection

    // CASE 3: ray misses box (dstA > dstB)

    ray.dstToBox = max(0, dstA);
    ray.dstInsideBox = max(0, dstB - ray.dstToBox);
}

RayHit Trace(inout Ray ray) {
    RayHit bestHit = CreateRayHit();
    if (_ShowGround) {
        IntersectGroundPlane(ray, bestHit);
    }
    
    GetRayBoxDst(_OrbBoundsMin, _OrbBoundsMax, ray);

    // Shortcut - all atoms/bonds are inside box
    if (ray.dstInsideBox > 0) {
        //Cylinders
        for (uint cylinderIndex = 0; cylinderIndex < numBonds; cylinderIndex++) {
        IntersectCylinder(ray, bestHit, _Bonds[cylinderIndex]);
        }

        // Spheres
        for (uint sphereIndex = 0; sphereIndex < numSpheres; sphereIndex++) {
        IntersectSphere(ray, bestHit, _Spheres[sphereIndex]);
        }
    }
    
    return bestHit;
}

float4 Shade(inout Ray ray, RayHit hit, bool sampleSky) {
    float4 result = float4(0, 0, 0, 0);
    if (hit.distance < 1.#INF) {
        // Reflect the ray and multiply energy with specular reflection
        ray.origin = hit.position + hit.normal * 0.001f;
        ray.direction = reflect(ray.direction, hit.normal);
        ray.energy.rgb *= hit.specular;

        // Shadow test ray
        Ray shadowRay = CreateRay(hit.position + hit.normal * 0.001f, -1 * _DirectionalLightRandom.xyz);
        RayHit shadowHit = Trace(shadowRay);
        if (shadowHit.distance == 1.#INF) {
            // Return a diffuse-shaded color
            result.rgb = saturate(dot(hit.normal, _DirectionalLight.xyz) * -1) * _DirectionalLight.w * hit.albedo;
        }
        result.a = 1;
    } else {
        // Erase the ray's energy - the sky doesn't reflect anything
        ray.energy = 0;
        
        if (sampleSky) {
            result.rgb = (1 - dot(ray.direction, _DirectionalLight.xyz))*0.5;
        } else {
            result = _BackgroundBrightness;
        }
    }
    
    return result;
}

float4 Orb(inout Ray ray, RayHit hit) {
    // Adds colour based on whether we're going through orbital density

    float4 result = float4(0, 0, 0, 0);

    // Greatest sample rate when dstInsideBox < 128/6 = 21.33
    // Below this distance the loop breaks early
    // Above this distance the sampleDistance stretches
    const uint MAXITER = 0x128;
    const float SAMPLERATE = 1.0f / 6.0f;

    float sampleDistance = max(SAMPLERATE, ray.dstInsideBox / MAXITER);

    // Sample rate within box
    float3 deltaSample = ray.direction * sampleDistance * _InvOrbBoundsSize;
    
    // Get world position of ray in box
    float3 position = ray.origin + ray.direction * ray.dstToBox;
    // Position of ray within orb bounds
    float3 uvw = (position - _OrbBoundsMin) * _InvOrbBoundsSize;
    // Maximum extent of sample
    float dstLimit = min(hit.distance-ray.dstToBox, ray.dstInsideBox);
    // Iso epsilon
    const float eps = 0.0001;

    float2 accumulatedDenity = 0;

    float distance = 0;

    for (uint step=0; step<MAXITER; step++) {
        
        float2 orbitalDensity = _OrbData.SampleLevel(sampler_OrbData, uvw, 0).xy;

        float expsum = (exp(-accumulatedDenity.x) + exp(-accumulatedDenity.y)) * 0.5f;
        
        if (_ShowIso && abs(orbitalDensity.x+orbitalDensity.y-_IsoLevel)<eps) {
            accumulatedDenity += orbitalDensity * 100 * expsum;
        }
        if (_ShowDensity) {
            accumulatedDenity += sampleDistance * _OrbitalPower * expsum * orbitalDensity;
        } 

        uvw += deltaSample;
        distance += sampleDistance;
        if (distance > dstLimit) {
            break;
        }
    }

    //accumulatedDenity *= sampleDistance * _OrbitalPower;

    result = saturate(ray.energy * (accumulatedDenity.x * _PositivePhaseColour + accumulatedDenity.y * _NegativePhaseColour));

    return result;
}

float4 HBond(Ray ray, RayHit hit) {

    float intersectAmount = 0;
    
    for (uint hBondIndex = numBonds; hBondIndex < numBonds+numHBonds; hBondIndex++) {
        intersectAmount += SampleHBond(ray, hit, _Bonds[hBondIndex]);
    }

    return _HBondColour * saturate(intersectAmount * 4);


}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID) {
    // Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);
    // Transform pixel to [-1,1] range and add a random pixel offset for antialiasing
    float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0f - 1.0f);
    // Get a ray for the UVs
    Ray ray = CreateCameraRay(uv);
    
    // Trace and shade
    float4 result = float4(0, 0, 0, 0);

    for (uint i = 0; i < 3; i++) {
        RayHit hit = Trace(ray);

        if (ray.dstInsideBox > 0) {
            if (_ShowOrb && i < 2) {
                float4 orb = Orb(ray, hit);
                result = orb.aaaa * orb + (1-orb.aaaa) * result;
            }
            if (_ShowHBonds && i < 2) {
                result += ray.energy * HBond(ray, hit);
            }
        }
            
        result += ray.energy * Shade(ray, hit, i != 0);
        if (!any(ray.energy)) {
            break;
        }
    }

    Result[id.xy] = result;

}
